"

$Id: String.som 29 2009-07-31 11:28:44Z michael.haupt $

Copyright (c) 2001-2013 see AUTHORS file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"

String = (
    "Strings are immutable"
	
	"Concatenate: returns a new string object"
    concatenate: argument = primitive
    + argument            = ( ^self concatenate: argument asString )
    , argument            = ( ^self concatenate: argument asString )
    
    "Converting"
    asString = ( ^self )
    asSymbol = primitive
    asNumber = primitive
    
    "Info"
    length = primitive
    isEmpty = (^self length = 0)
    notEmpty = (^self isEmpty not)
    isEmptyOrNil = (^self isEmpty)
    isString = (^true)
    first = (^self at: 1)
    second = (^self at: 2)
    last = (^ self at: self length)
    
    "Comparing"   
    = argument = primitive
    
    "substring: from 'start' to (and including) 'end'."
    primSubstringFrom: start to: end = primitive
    
    substringFrom: start to: end = (
        ((end <= self length) && (start > 0) && (start <= end))
            ifTrue: [^self primSubstringFrom: start to: end]
            ifFalse: [
                self error: 'Attempting to index string out of its bounds (start: ' + start asString + ' end: ' + end asString + ' length: ' + self length asString + ')' ]
    )

    beginsWith: prefix = (
        self length < prefix length ifTrue: [ ^ false ].
        
        1 to: prefix length do: [:i | 
            ((self at: i) = (prefix at: i)) ifFalse: [ ^ false ].  
        ].
        
        ^ true
    )
    
    endsWith: suffix = (
      | l sufL |
      l := self length.
      sufL := suffix length.
      l < sufL ifTrue: [ ^ false ].

      1 to: sufL do: [:i |
          (self at: l - sufL + i) = (suffix at: i) ifFalse: [ ^ false ]
      ].
      ^ true
    )

    asInteger = (
        ^ Integer fromString: self
    )

    asDouble = (
        ^ Double fromString: self
    )
    
    at: index = primitive
    "Just needed to run Json cross-language benchmark"
    charAt: index = (^(self at: index) asString)
    
    "Printing"
    print    = ( system printString: self )
    printOn: aStream = (self storeOn: aStream)
    storeOn: aStream = (
		| x |
		aStream nextPut: $'.
		1 to: self length do:
			[:i |
				aStream nextPut: (x := self at: i).
				x = $' ifTrue: [aStream nextPut: x]].
		aStream nextPut: $'
	)
    
    "Printing"
    split: aSequenceableCollection = (
		| result position oldPosition |
		result := OrderedCollection new: (aSequenceableCollection length / 2) asInteger.
		self split: aSequenceableCollection do: [ :item |
			result add: item ].
		^ result
	)
	
	split: aSequenceableCollection do: aBlock = (
		self split: aSequenceableCollection indicesDo: [ :start :end | 
			aBlock value: (aSequenceableCollection copyFrom: start to: end) ]
	)
	
	split: aSequenceableCollection indicesDo: aBlock = (
		| position oldPosition |
		position := 1.
		oldPosition := position.
		position := aSequenceableCollection indexOfSubCollection: self startingAt: position.
		[ position > 0 ] whileTrue: [
			aBlock value: oldPosition value: position - 1.
			position := position + self length.
			oldPosition := position.
			position := aSequenceableCollection indexOfSubCollection: self startingAt: position.
		].
	
		aBlock value: oldPosition value: aSequenceableCollection length.
	)
	
	indexOf: anElement startingAt: start = (
		^self indexOf: anElement startingAt: start ifAbsent: 0
	)
	
	includes: aChar = (^(self indexOf: aChar startingAt: 1) > 0)
	
	indexOf: anElement startingAt: start ifAbsent: exceptionBlock = (
		start to: self length do: [:index |
			(self at: index) = anElement ifTrue: [^ index]
		].
		^ exceptionBlock value
	)
	
	indexOfSubCollection: aSubCollection startingAt: anIndex = ( 
		| index |
		index := self findString: aSubCollection startingAt: anIndex.
		index = 0 ifTrue: [^0].
		^ index
	)
	
	findString: key startingAt: start = (
		self length = 0 ifTrue: [^ 0].
		start to: self length - key length + 1 do: [:startIndex | | index |
			index := 1.
			[(self at: startIndex+index-1) = (key at: index)] whileTrue: [
					index = key length ifTrue: [^ startIndex].
					index := index+1
			]
		].
		^ 0
	)	
	
	"Pharo Compatibility"
	copyFrom: anIndex to: anotherIndex = (
		anIndex > anotherIndex ifTrue: [^''].
		^self substringFrom: anIndex to: anotherIndex.
	)
	
	copyReplaceAll: oldSubCollection with: newCollection = (
		"Answer a copy of the receiver in which all occurrences of
		oldSubCollection have been replaced by newCollection "
		| aString startSearch currentIndex endIndex |
		
		aString := self.
		startSearch := 1.
		[(currentIndex := aString indexOfSubCollection: oldSubCollection startingAt: startSearch) > 0]
			whileTrue: [
				endIndex := currentIndex + oldSubCollection length - 1.
				aString := aString
						copyReplaceFrom: currentIndex
						to: endIndex
						with: newCollection.
				startSearch := currentIndex + newCollection length].
		^ aString
	)
	
	copyReplaceFrom: start to: stop with: replacementCollection = ( 
		| newSequenceableCollection newSize endReplacement |
		newSize := self length - (stop - start + 1) + replacementCollection length.
		endReplacement := start - 1 + replacementCollection length.
		newSequenceableCollection := self species new: newSize.
		start > 1 ifTrue:[
			newSequenceableCollection
				replaceFrom: 1
				to: start - 1
				with: self
				startingAt: 1].
		start <= endReplacement ifTrue:[
			newSequenceableCollection
				replaceFrom: start
				to: endReplacement
				with: replacementCollection
				startingAt: 1].
		endReplacement < newSize ifTrue:[
			newSequenceableCollection
				replaceFrom: endReplacement + 1
				to: newSize
				with: self
				startingAt: stop + 1].
		^newSequenceableCollection
	)
	
	do: aBlock = (
		"Refer to the comment in Collection|do:."
		1 to: self length do:
			[:index | aBlock value: (self at: index)]
	)
	
	numArgs = ( 
		"Answer either the number of arguments that the receiver would take if considered a selector.  Answer -1 if it couldn't be a selector. It is intended mostly for the assistance of spelling correction."
	
		| firstChar numColons start ix |
		self length = 0 ifTrue: [^ -1].
		firstChar := self at: 1.
		(firstChar isLetter or: [ firstChar = $_]) ifTrue:
			["Fast reject if any chars are non-alphanumeric
			NOTE: fast only for Byte things - Broken for Wide"
			self class isBytes
				ifTrue: [(self findSubstring: '~' in: self startingAt: 1 matchTable: Tokenish) > 0 ifTrue: [^ -1]]
				ifFalse: [2 to: self length do: [:i | (self at: i) tokenish ifFalse: [^ -1]]].
			"Fast colon count"
			numColons := 0.  start := 1.
			[(ix := self indexOf: $: startingAt: start) > 0]
				whileTrue:
					[(ix = start or: [(self at: start) isDigit]) ifTrue: [^-1].
					numColons := numColons + 1.
					start := ix + 1].
			numColons = 0 ifTrue: [^ 0].
			(self at: self length) = $:
				ifTrue: [^ numColons]
				ifFalse: [^ -1]].
		"Test case of binary selector, if self allSatisfy: #isSpecial (inlined for speed)"
		1 to: self length do: [:i | (self at: i) isSpecial ifFalse: [^ -1]].
		^1
	)		
	"FileSystem"
	asVmPathName = (^self)
	readStream = (^ ReadStream on: self)
	
	"Petit Parser"
	asParser = (^ PPLiteralSequenceParser on: self)
	asPetitStream = (^ PPStream on: self)
	asUppercase = (
		| output |
		output := Vector new: self length.
		self do: [:char | output append: char asUppercase].
		^output
	)
	asLowercase = (
		| output |
		output := Vector new: self length.
		self do: [:char | output append: char asLowercase].
		^output
	)
	sameAs: anotherString = (^self asLowercase = anotherString asLowercase)
	contains: anElement = (^self includes: anElement)
	
	-------------------------------------------------------------
	
	streamContents: blockWithArg = (
		^ self new: 100 streamContents: blockWithArg
	)
	new: a = (self printLastMethods:5)
	new: newSize streamContents: blockWithArg = (
		| stream |
		stream := WriteStream on: (Vector new: newSize).
		blockWithArg value: stream.
		^ stream contents
	)
	
	with: firstObject = (
		^firstObject asString
	)
	
	with: firstObject with: secondObject = (
		^firstObject asString + secondObject asString.
	)
	
	with: firstObject with: secondObject with: thirdObject = (
		^firstObject asString + secondObject asString + thirdObject asString.
	)
)
