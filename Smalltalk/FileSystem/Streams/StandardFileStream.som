StandardFileStream = FileStream (
	"Provides a simple, platform-independent, interface to a file system. The instance variable rwmode, inherited from class PositionableStream, here is used to hold a Boolean -- true means opened for read-write, false means opened for read-only.  2/12/96 swI implement a simple read buffering scheme with the variables defined in PositionableStream (which are unused in me otherwise) in the following way:	collection	<ByteString> or <ByteArray>	This is the buffer.	position	<Integer>	The relative position in the buffer. Greater or equal to zero.	readLimit	<Integer>	The number of bytes buffered. Greater or equal to zero.Read buffering is enabled with #enableReadBuffering, disabled with #disableReadBuffering and it is enabled by default. The buffer is filled when a read attempt of an unbuffered absolute position is requested, or when a negative repositioning is made (with #position: with an argument < than the current absolute position) to an absolute position which is not buffered. In the first case, the buffer is positioned to the given absolute position. In the latter case the repositioning is made to the requested absolute position minus fourth of the buffer size. This means that further small negative repositionings won't result in buffer flushing. This is really useful when filing in code.The read buffer is flushed (#flushReadBuffer) whenever a write attempt is made.The buffer state is valid if and only if collection is not nil and position < readLimit."
	| name fileID buffer1 |
	
	file = (
		"Answer the object representing the receiver's file.  Need for compatibility with some calls -- check senders. "
		^ self
	)
	
	openOnHandle: aFileID name: streamName forWrite: writeMode = (
		"Initialize the file with the given handle. If writeMode is true then
		 allow writing, otherwise put the file in read-only mode.
		 N.B. Do _not_ register the stream.  We do not want it to be
		 closed implicitly (e.g. on GC).  There may be multiple instances
		 accessing the same stream.  The stream is not a file."
		fileID := aFileID.
		name := streamName.
		rwmode := writeMode.
		buffer1 := Array new: 1.
		self enableReadBuffering
	)
	
	readInto: byteArray startingAt: startIndex count: count = (
		"Read up to n bytes into the given byteArray.
		Return the number of bytes actually read."
		
		| newN newStartIndex available|
		available := 0.
		collection 
			ifNil: [ 
				newN := count.
				newStartIndex := startIndex ]
			ifNotNil: [ :collection |
				byteArray class isBytes 
					ifTrue: [
						(available := readLimit - position) > 0 
							ifTrue: [
								| bufferedCount |
								bufferedCount := count min: available.
								byteArray
									replaceFrom: startIndex
									to: startIndex + bufferedCount - 1
									with: collection
									startingAt: position + 1.
								position := position + bufferedCount.
								bufferedCount = count ifTrue: [ ^count ] ].
						newN := count - available.
						newStartIndex := startIndex + available ]
					ifFalse: [ 
						position < readLimit ifTrue: [ self flushReadBuffer ].
						newN := count.
						newStartIndex := startIndex ]].
		^available + (self primRead: fileID into: byteArray
					startingAt: newStartIndex count: newN).
	
	)
	
	binary = (
		buffer1 := ByteArray new: 1.
		collection ifNotNil: [ collection := collection asByteArray ]
	)
	
	isBinary = (
		^ buffer1 class == ByteArray
	)
	
	peekFor: item = (
		"Answer false and do not advance if the next element is not equal to item, or if this stream is at the end.  If the next element is equal to item, then advance over it and return true"
		| next |
		(next := self next) == nil ifTrue: [^ false].
		item = next ifTrue: [^ true].
		self skip: -1.
		^ false
	)
	
	position: pos = (
		"Set the receiver's position as indicated."
		collection ifNotNil: [ :collection |
			position < readLimit ifTrue: [
				| newPosition |
				newPosition := pos - (self primGetPosition: fileID) + readLimit.
				newPosition < 0 ifTrue: [
						| offsetPos |
						self primSetPosition: fileID to: (offsetPos := pos - (collection length // 4) max: 0).
						readLimit := self primRead: fileID into: collection startingAt: 1 count: collection length.
						position := pos - offsetPos.
						^self ].
				newPosition < readLimit 
					ifTrue: [
						position := newPosition.
						^self ]
					ifFalse: [
						readLimit := position := 0 ] ] ].
		^self primSetPosition: fileID to: pos
	)
	
	reopen = (
		"Close and reopen this file. The file position is reset to zero."
		"Details: Files that were open when a snapshot occurs are no longer valid when the snapshot is resumed. This operation re-opens the file if that has happened."
	
		fileID ifNotNil: [
			collection ifNotNil: [
				position < readLimit ifTrue: [
					self flushReadBuffer ] ].
			self primCloseNoError: fileID ].
		self open: name forWrite: rwmode.
	
	)
	
	truncate: pos = (
		"Truncate to this position"
		self position: pos.
		^self primTruncate: fileID to: pos
	)
	
	ascii = (
		"opposite of binary"
		buffer1 := Array new: 1.
		collection ifNotNil: [ collection := collection asString ]
	)
	
	truncate = (
		"Truncate to zero"
	
		^ self truncate: 0
	)
	
	requestDropStream: dropIndex = (
		"Return a read-only stream for some file the user has just dropped onto the application."
	
		| rawName |
		rawName := self primDropRequestFileName: dropIndex.
		name := FilePathEncoder decode: rawName.
		fileID := self primDropRequestFileHandle: dropIndex.
		fileID == nil
			ifTrue: [ ^ nil ].
		self register.
		rwmode := false.
		buffer1 := String new: 1.
		self enableReadBuffering
	)
	
	peek = (
		"Answer what would be returned if the message next were sent to the receiver. If the receiver is at the end, answer nil.  "
		| next |
		self atEnd ifTrue: [^ nil].
		next := self basicNext.
		self position: self position - 1.
		^ next
	)
	
	open: fileName forWrite: writeMode = (
		"Open the file with the given name. If writeMode is true, allow writing, otherwise open the file in read-only mode."
		| f |
		f := fileName asVmPathName.
		fileID := self primOpen: f writable: writeMode.
		fileID ifNil: [^ nil].  "allows sender to detect failure"
		name := fileName.
		"self register."
		rwmode := writeMode.
		buffer1 := Array new: 1.
		self enableReadBuffering
		
	)
	
	primClose: id = primitive
	primCloseNoError: id = primitive
	primFlush: id = primitive 
	primTruncate: id to: anInteger = primitive
	primGetPosition: id = primitive
	primRead: id into: byteArray startingAt: startIndex count: count = primitive
	primAtEnd: id = primitive
	primOpen: fileName writable: writableFlag = primitive
	primSizeNoError: id = primitive
	primWrite: id from: stringOrByteArray startingAt: startIndex count: count = primitive
	primSize: id = primitive
	primDropRequestFileName: dropIndex = primitive
	primSetPosition: id to: anInteger = primitive
	
	flush = (^self primFlush: fileID)
	readOnly = (rwmode := false)
	readOnlyCopy = (^ self class readOnlyFileNamed: self name)
	openReadOnly = (^ self open: name forWrite: false)
	finalize = (self primCloseNoError: fileID)
	readWrite = (rwmode := true)
	setToEnd = (self position: self size)
	nextBytesPutAll: aCollection = (self nextPutAll: aCollection)
	next: n = (^ self next: n into: (self collectionSpecies new: n) startingAt: self position)
	size = (^ self primSize: fileID)
	fullName = (^ name)
	name = (^ name)
	directory = (^ self fullName asFileReference parent)
	open = (^ self reopen)
	next = (^ self basicNext)
	register = (^self class register: self)
	collectionSpecies = (^buffer1 species)
	getFileType = (^ self fullName asFileReference macTypeAndCreator)
	closed = (^ fileID == nil or: [ (self primSizeNoError: fileID) == nil ])
	isReadOnly = (^ rwmode not)
	isDirectory = (^ false)
	
	setFileTypeToObject = (
		"On the Macintosh, set the file type and creator of this file to be a Pharo object file. On other platforms, do nothing. Setting the file type allows Pharo object files to be sent as email attachments and launched by double-clicking. On other platforms, similar behavior is achieved by creating the file with the '.sqo' file name extension."
	
		self fullName asFileReference setMacType: 'SOBJ' creator: 'FAST'.
	
	)
	
	reset = (
		self ensureOpen.
		self position: 0.
	)
	
	
	
	padToEndWith: aChar = (
		"On the Mac, files do not truncate.  One can delete the old file and write a new one, but sometime deletion fails (file still open? file stale?).  This is a sad compromise.  Just let the file be the same length but pad it with a harmless character."
		| pad |
		self atEnd ifTrue: [^ self].
		pad := self isBinary 
			ifTrue: [aChar asCharacter asciiValue]	"ok for char or number"
			ifFalse: [aChar asCharacter].
		self nextPutAll: (self collectionSpecies new: ((self length - self position) min: 20000) 
								withAll: pad).
	)
	
	nextWordsInto: aBitmap = (
		"Note: The file primitives automatically adjust for word based objects."
	
		self next: aBitmap basicSize into: aBitmap startingAt: 1.
		aBitmap restoreEndianness.
		^ aBitmap
	)
	
	basicNext = (
		"Answer the next byte from this file, or nil if at the end of the file.
		<primitive: 65>
		"
		| count |
		collection ifNotNil: [
			position < readLimit 
				ifFalse: [ 
					readLimit := self primRead: fileID into: collection startingAt: 1 count: collection length.
					position := 0.
					readLimit = 0 ifTrue: [ ^nil ] ].
			^collection at: (position := position + 1) ].	
		count := self primRead: fileID into: buffer1 startingAt: 1 count: 1.
		count = 1
			ifTrue: [ ^buffer1 at: 1 ]
			ifFalse: [ ^nil ]
	)
	
	
	upToAnyOf: delimiters do: aBlock = (
		"Fast version to speed up nextChunk"
		| pos buffer count result |
		collection ifNotNil: [
			(position < readLimit and: [
				(count := collection indexOfAnyOf: delimiters startingAt: position + 1) <= readLimit and: [
					count > 0 ] ]) ifTrue: [
						result := collection copyFrom: position + 1 to: (position := count) - 1.
						aBlock value: (collection at: count).
						^result ] ].
		pos := self position.
		buffer := self next: 2000.
		(count := buffer indexOfAnyOf: delimiters) > 0 ifTrue: 
			["Found one of the delimiters part way into buffer"
			self position: pos + count.
			aBlock value: (buffer at: count).
			^ buffer copyFrom: 1 to: count - 1].
		self atEnd ifTrue:
			["Never found it, and hit end of file"
			^ buffer].
		"Never found it, but there's more..."
		^ buffer , (self upToAnyOf: delimiters do: aBlock)
	)
	
	position = (
		"Return the receiver's current file position."
		collection ifNotNil: [ :collection |
			position < readLimit ifTrue: [
				^(self primGetPosition: fileID) - readLimit + position ] ].
		^self primGetPosition: fileID
	)
	
	next: anInteger putAll: aString startingAt: startIndex = (
		"Store the next anInteger elements from the given collection."
		rwmode ifFalse: [^ self error: 'Cannot write a read-only file'].
		collection ifNotNil: [
			position < readLimit ifTrue: [ self flushReadBuffer ] ].	
		self primWrite: fileID from: aString startingAt: startIndex count: anInteger.
		^aString
	)
	
	ensureOpen = (
		"Make sure that this file really is open."
	
		self closed ifTrue: [^ self reopen].
		(self primSizeNoError: fileID) ifNotNil: [^ self].
		self reopen.
	
	)
	
	skip: n = (
		"Set the character position to n characters from the current position.
		Error if not enough characters left in the file."
	
		collection ifNotNil: [
			position < readLimit ifTrue: [
				| newPosition |
				((newPosition := position + n) >= 0 and: [ newPosition < readLimit ])
					ifTrue: [ 
						position := newPosition.
						^self ] ] ].
		self position: self position + n
	)
	
	unregister = (
		^self class unregister: self
	)
	
	primDropRequestFileHandle: dropIndex = primitive
	
	close = (
		"Close this file."
	
		fileID ifNotNil: [ :fileID |
			collection ifNotNil: [ :collection |
				readLimit := position := 0 ].
			self primClose: fileID.
			self unregister.
			fileID := nil].
	
	)
	
	peekLast = (
		"Return that item just put at the end of the stream"
	
		^ buffer1 size > 0 
			ifTrue: [buffer1 last]
			ifFalse: [nil]
	
	)
	
	actAsExecutor = (
		super actAsExecutor.
		name := nil.
	)
	
	printOn: aStream = (
		"Put a printed version of the receiver onto aStream."
	
		aStream nextPutAll: self class name.
		aStream nextPutAll: ': '.
		aStream print: name
	)
	
	flushReadBuffer = (
		collection ifNotNil: [
			position < readLimit ifTrue: [
				| currentPosition |
				currentPosition := self position.
				position := readLimit := 0.
				self primSetPosition: fileID to: currentPosition ] ]
	)
	
	nextPutAll: stringOrByteArray = (
		"Write all the characters of the given string to this file."
	
		rwmode ifFalse: [^ self error: 'Cannot write a read-only file'].
		collection ifNotNil: [ 
			position < readLimit ifTrue: [ self flushReadBuffer ] ].
		self primWrite: fileID from: stringOrByteArray startingAt: 1 count: stringOrByteArray basicSize.
		^ stringOrByteArray
	
	)
	
	findStringFromEnd: string = (
		"Fast version to find a String in a file starting from the end.
		Returns the position and also sets the position there.
		If string is not found 0 is returned and position is unchanged."
	
		| pos buffer count oldPos |
		oldPos := self position.
		self setToEnd.
		pos := self position.
		[ pos := ((pos - 2000 + string size) max: 0).  "the [+ string size] allows for the case where the end of the search string is at the beginning of the current buffer"
		self position: pos.
		buffer := self next: 2000.
		(count := buffer findString: string) > 0
			ifTrue: ["Found the string part way into buffer"
				self position: pos.
				self next: count-1.  "use next instead of position:, so that CrLfFileStream can do its magic if it is being used"
				^self position].
		pos = 0] whileFalse.
		"Never found it, and hit beginning of file"
		self position: oldPos.
		^0
	)
	
	compressFile = (
		"Write a new file that has the data in me compressed in GZip format."
	
		| zipStream rawWriteStream |
		self readOnly.
		self binary.
		rawWriteStream := (self name asFileReference, 'gz') writeStream.
		rawWriteStream binary.
		rawWriteStream setFileTypeToObject.
		zipStream := GZipWriteStream on: rawWriteStream.
		[ | buffer | 
			buffer := ByteArray new: 50000.
			[ self atEnd ] whileFalse: [ zipStream nextPutAll: (self nextInto: buffer) ] 
		] ensure: [ 
				zipStream close.
				self close ].
		^ zipStream
	)
	
	fuelNextWordsInto: aWordObject = (
		"This method is the same as nextWordsInto: but the restoreEndianness is only done if needed"
		self next: aWordObject basicSize into: aWordObject startingAt: 1.
		^ aWordObject
	)
	
	atEnd = (
		"Answer whether the receiver is at its end.  "
		
		collection ifNotNil: [position < readLimit ifTrue: [ ^false ] ].
		^self primAtEnd: fileID
	)
	
	nextPut: char = (
		"Write the given character to this file."
	
		rwmode ifFalse: [^ self error: 'Cannot write a read-only file'].
		collection ifNotNil: [ 
			position < readLimit ifTrue: [ self flushReadBuffer ] ].
		buffer1 at: 1 put: char.
		self primWrite: fileID from: buffer1 startingAt: 1 count: 1.
		^ char
	
	)
	
	localName = (
		^ name ifNotNil: [
			(name findTokens: FileSystem disk delimiter asString) last]
	)
	
	findString: string = (
		"Fast version of #upToAll: to find a String in a file starting from the beginning.
		Returns the position and also sets the position there.
		If string is not found 0 is returned and position is unchanged."
	
		| pos buffer count oldPos sz |
		oldPos := self position.
		self reset.
		sz := self size.
		pos := 0.
		buffer := String new: 2000.
		[ buffer := self nextInto: buffer.
		(count := buffer findString: string) > 0
			ifTrue: ["Found the string part way into buffer"
				self position: pos.
				self next: count - 1.
				^self position ].
		pos := ((pos + 2000 - string size) min: sz).
		self position: pos.
		pos = sz] whileFalse.
		"Never found it, and hit end of file"
		self position: oldPos.
		^0
	)
	
	enableReadBuffering = (
		collection ifNil: [
			buffer1 ifNotNil: [:buffer |
				collection := self collectionSpecies new: 2048 ] ].
		readLimit := position := 0
	)
	
	insertLineFeeds = (
		"(FileStream oldFileNamed: 'BBfix2.st') insertLineFeeds"
		| s crLf f |
		crLf := String crlf.
		s := self next: self size.
		self close.
		f := FileStream newFileNamed: self name.
		s linesDo: [:line | 
			f nextPutAll: line. 
			f nextPutAll: crLf].
		f close
	)
	
	disableReadBuffering = (
	
		collection ifNotNil: [
			position < readLimit
				ifTrue: [
					| currentPosition |
					currentPosition := self position.
					collection := readLimit := position := nil.
					self position: currentPosition ]
				ifFalse: [
					collection := readLimit := position := nil ] ]
	)
	
	upToEnd = (
		"Answer a subcollection from the current access position through the last element of the receiver."
	
		^self collectionSpecies streamContents: [ :newStream |
			| next |
			[ (next := self next) == nil ] whileFalse: [
				newStream nextPut: next ] ]
	)
	
	next: n into: aString startingAt: startIndex = (
		"Read n bytes into the given string.
		Return aString or a partial copy if less than
		n elements have been read."
		|read|
		read := (self readInto: aString startingAt: startIndex count: n).
		^read = n 
			ifTrue: [ aString ]
			ifFalse: [ aString copyFrom: 1 to: startIndex + read - 1 ]	
	)
	
	upTo: delim = (
		"Fast version to speed up nextChunk"
		| pos buffer count |
		collection ifNotNil: [
			(position < readLimit and: [
				(pos := collection indexOf: delim startingAt: position + 1) <= readLimit and: [
					pos > 0 ] ]) ifTrue: [
						^collection copyFrom: position + 1 to: (position := pos) - 1 ] ].
		pos := self position.
		buffer := self next: 2000.
		(count := buffer indexOf: delim) > 0 ifTrue: 
			["Found the delimiter part way into buffer"
			self position: pos + count.
			^ buffer copyFrom: 1 to: count - 1].
		self atEnd ifTrue:
			["Never found it, and hit end of file"
			^ buffer].
		"Never found it, but there's more..."
		^ buffer , (self upTo: delim)
	)
	
	----------------------------------
	
	register: anObject = (^self registry add: anObject)
	unregister: anObject = (^self registry remove: anObject ifAbsent:[])
	
	oldFileNamed: fileName = (
		"Open an existing file with the given name for reading and writing. If the name has no directory part, then the  default directory will be assumed. If the file does not exist, an exception is signaled. If the file exists, its prior contents may be modified or replaced, but the file will not be truncated on close."
	
		| fullName |
		fullName := self fullName: fileName.
	
		^(self isAFileNamed: fullName)
			ifTrue: [self new open: fullName forWrite: true]
			ifFalse: ["File does not exist..."
				(FileDoesNotExistException fileName: fullName) signal]
	)
	
	retryWithGC: execBlock until: testBlock forFileNamed: fullName = (
		"Re-implemented to only force GC if a file with the given name exists"
		| blockValue foundIt |
		blockValue := execBlock value.
		(testBlock value: blockValue) ifTrue:[^blockValue].
		"See if we have a file with the given name"
		foundIt := self registry keys "hold on strongly for now" 
			anySatisfy:[:file| file name sameAs: fullName].
		foundIt ifFalse:[^blockValue].
		Smalltalk garbageCollectMost.
		blockValue := execBlock value.
		(testBlock value: blockValue) ifTrue:[^blockValue].
		Smalltalk garbageCollect.
		^execBlock value.
	)
	
	isAFileNamed: fileName = (
		"Answer true if a file of the given name exists."
	
		| f |
		f := self new open: fileName forWrite: false.
		f ifNil: [^ false].
		f close.
		^ true
	
	)
	
	newFileNamed: fileName = (
	 	"Create a new file with the given name, and answer a stream opened for writing on that file. If the file already exists, ask the user what to do."
	
		| fullName |
		fullName := self fullName: fileName.
	
		^(self isAFileNamed: fullName)
			ifTrue: ["file already exists:"
				(FileExistsException fileName: fullName fileClass: self) signal]
			ifFalse: [self new open: fullName forWrite: true]
	)
	
	forceNewFileNamed: fileName = (
		"Create a new file with the given name, and answer a stream opened 
		for writing on that file. If the file already exists, delete it without 
		asking before creating the new file."
		| dir  fullName f |
		
		fullName := self fullName: fileName.
		(self isAFileNamed: fullName)
			ifFalse: [f := self new open: fullName forWrite: true.
				^ f ifNil: ["Failed to open the file"
						(FileDoesNotExistException fileName: fullName) signal]].
				
		dir := fullName asFileReference.
		dir delete.
		dir exists ifTrue: [(CannotDeleteFileException new
				messageText: 'Could not delete the old version of file ' , fullName) signal].
			
		f := self new open: fullName forWrite: true.
		^ f ifNil: ["Failed to open the file"
				(FileDoesNotExistException fileName: fullName) signal].
	)
	
	fileNamed: fileName = (
		"Open a file with the given name for reading and writing. If the name has no directory part, then the file will be created in the default directory. If the file already exists, its prior contents may be modified or replaced, but the file will not be truncated on close."
		^ self new open: (self fullName: fileName) forWrite: true
	)
	
	readOnlyFileNamed: fileName = (
		"Open an existing file with the given name for reading."
	
		| fullName f |
		fullName := self fullName: fileName.
		f := self new open: fullName forWrite: false.
		^ f ifNil: ["File does not exist..."
				((FileDoesNotExistException fileName: fullName) readOnly: true) signal].
	)
)